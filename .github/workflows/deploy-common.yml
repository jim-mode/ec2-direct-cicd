name: PHP Deploy Common

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      image_tag:
        required: true
        type: string
      bastion_host:
        description: "Bastion server address"
        required: true
        type: string
      app_target:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true
      DEPLOY_SSH_PRIVATE_KEY:
        required: true

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      GIT_REF: ${{ inputs.ref }}
      IMAGE_TAG: ${{ inputs.image_tag }}
      APP_TARGET_HOST: ${{ inputs.app_target }}
      BASTION_HOST: ${{ inputs.bastion_host }}
      DEPLOY_SSH_PRIVATE_KEY: ${{ secrets.DEPLOY_SSH_PRIVATE_KEY }}
      SSH_USER: deploy
    steps:
      - name: Output Input and Env
        run: |
          echo inputs.ref: ${{ inputs.ref }}
          echo env.GIT_REF: ${{ env.GIT_REF }}
          echo inputs.image_tag: ${{ inputs.image_tag }}
          echo env.IMAGE_TAG: ${{ env.IMAGE_TAG }}

      - name: CI Team Notification
        uses: toko-bifrost/ms-teams-deploy-card@master #  or "./" if in a local set-up
        if: always()
        with:
          github-token: ${{ github.token }}
          webhook-uri: ${{ secrets.MS_TEAMS_WEBHOOK_URI }}
          show-on-failure: true

      - name: Checkout ðŸ›Ž
        uses: actions/checkout@master
        with:
          ref: ${{ env.GIT_REF }}

      - name: Configure SSH & Verify / Install Docker Runtime on Hosts
        run: |
          # Only assume deploy user is provisioned with sudo permission

          # Setup Github Action Host
          mkdir -p ~/.ssh/ && echo "$DEPLOY_SSH_PRIVATE_KEY" > ~/.ssh/id_rsa && chmod 600 ~/.ssh/id_rsa

          # Setup Bastion Host
          echo "$DEPLOY_SSH_PRIVATE_KEY" > ~/id_rsa && ssh -o StrictHostKeyChecking=no ${SSH_USER}@${BASTION_HOST} "hostname"
          rsync -azq ~/id_rsa ${SSH_USER}@${BASTION_HOST}:/home/$SSH_USER/
          ssh -o StrictHostKeyChecking=no ${SSH_USER}@${BASTION_HOST} "mkdir -p ~/.ssh && mv ~/id_rsa ~/.ssh/ && chmod 600 ~/.ssh/id_rsa"

          # Setup App Servers
          for host in $APP_TARGET_HOST; do
            rsync -azq -e 'ssh -o StrictHostKeyChecking=no -A -J deploy@${BASTION_HOST}' ./release/verify_docker.sh deploy@${host}:~/verify_docker.sh
            ssh -o StrictHostKeyChecking=no -J deploy@${BASTION_HOST} deploy@${host} "mkdir -p ~/docker && ~/verify_docker.sh && rm -rf ~/verify_docker.sh"
          done
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: ~~ Get Docker Images from ECR + Triple Verify ~~
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        run: |
          echo "$(date): Deploy files to EC2"

          # Create / Update files for host EC2 to pull target docker images
          cd release
          sed -i "s/PHP_DOCKER_IMAGE/$ECR_REGISTRY\/ec2-cicd-php:$IMAGE_TAG/g" docker-compose.yml
          sed -i "s/NGINX_DOCKER_IMAGE/$ECR_REGISTRY\/ec2-cicd-nginx:$IMAGE_TAG/g" docker-compose.yml
          echo "$( aws ecr get-login-password --region us-east-1 )" > DOCKER_PW
          echo "cat ~/docker/DOCKER_PW | docker login -u AWS --password-stdin $ECR_REGISTRY" > DOCKER_LOGIN

          for (( c=1; c<=3; c++ ))
          do
            target_host_counter=0
            match_host_counter=1

            # Loop through all EC2 hosts to pull images based on docker-compose
            for host in $APP_TARGET_HOST; do
              ((target_host_counter+=1))

              # Transfer files to host and execute docker pull
              rsync -azq -e 'ssh -A -J deploy@${BASTION_HOST}' DOCKER_PW DOCKER_LOGIN docker-compose.yml deploy@${host}:~/docker
              ssh -o StrictHostKeyChecking=no -J deploy@${BASTION_HOST} deploy@${host} "/bin/bash ~/docker/DOCKER_LOGIN && docker-compose -f docker/docker-compose.yml pull -q"

              # Get PHP Docker Image ID from host
              HOST_IMAGE_ID=$(ssh -o StrictHostKeyChecking=no -J deploy@${BASTION_HOST} deploy@${host} "docker images | grep ec2-cicd-php | grep $IMAGE_TAG" | awk '{print $3}')

              if [ -z "$PHP_IMAGE_ID" ]; then
                  PHP_IMAGE_ID=$HOST_IMAGE_ID
                  echo "$(date) #### First host; SET PHP Image ID $PHP_IMAGE_ID for host $host"
              else
                  if [ "$PHP_IMAGE_ID" = "$HOST_IMAGE_ID" ]; then
                      echo "$(date) #### MATCHING PHP Image ID $PHP_IMAGE_ID"
                      ((match_host_counter+=1))
                  else
                      echo "$(date) #### PHP IMAGES ARE NOT MATCHING!!"
                      echo "$(date) #### EXPECTED $PHP_IMAGE_ID ACTUAL $HOST_IMAGE_ID on host $host"
                  fi
              fi
            done
            if [ $target_host_counter == $match_host_counter ]; then
              echo "$(date) #### All $target_host_counter hosts contain same docker image. Attempt $c"
              break
            else
              echo "$(date) #### Some host contain mismatch docker images. Attempt $c"
              if [ $c == 3 ]; then
                exit 1
              fi
            fi
          done

      - name: Execute Docker Compose Up
        run: |
          for host in $APP_TARGET_HOST; do
            ssh -o StrictHostKeyChecking=no -J deploy@${BASTION_HOST} deploy@${host} "docker-compose -f docker/docker-compose.yml up -d"
          done

      - name: Clean up docker images / volumes / network
        run: |
          for host in $APP_TARGET_HOST; do
            ssh -o StrictHostKeyChecking=no -J deploy@${BASTION_HOST} deploy@${host} "docker system prune --all --force && docker volume prune --force && docker network prune --force"
          done
