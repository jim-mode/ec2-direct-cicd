name: PHP Build Common

on:
  workflow_call:
    inputs:
      ref:
        required: true
        type: string
      image_tag:
        required: true
        type: string
    secrets:
      AWS_ACCESS_KEY_ID:
        required: true
      AWS_SECRET_ACCESS_KEY:
        required: true

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      GIT_REF: ${{ inputs.ref }}
      IMAGE_TAG: ${{ inputs.image_tag }}
    steps:
      - name: Output Input and Env
        run: |
          echo inputs.ref ${{ inputs.ref }}
          echo env.GIT_REF ${{ env.GIT_REF }}
          echo inputs.image_tag ${{ inputs.image_tag }}
          echo env.IMAGE_TAG ${{ env.IMAGE_TAG }}

      - name: Checkout ðŸ›Ž
        uses: actions/checkout@master
        with:
          ref: ${{ env.GIT_REF }}

      - name: Update file with branch & hash
        id: set-version
        run: |
          branch="${GITHUB_REF#refs/heads/}"
          cleanBranch="${branch//\//-}"
          hash="$(git rev-parse --short "$GITHUB_SHA")"
          date="$(date)"
          sed -i "s/####/version\:\ $hash-$cleanBranch\ \ timestamp\:\ $date\ /g" templates/default/homepage.html.twig

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push PHP Docker
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ec2-cicd-php
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Build, tag, and push Nginx Docker
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ec2-cicd-nginx
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Built!
        run: echo App Built
